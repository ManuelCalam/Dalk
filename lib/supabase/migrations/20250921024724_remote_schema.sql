

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."create_or_get_conversation"("other_user" "uuid") RETURNS "uuid"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
declare
  convo_id uuid;
begin
  -- Buscar conversación existente entre ambos
  select c.id into convo_id
  from conversations c
  join conversation_participants cp1 on cp1.conversation_id = c.id and cp1.user_id = auth.uid()
  join conversation_participants cp2 on cp2.conversation_id = c.id and cp2.user_id = other_user
  limit 1;

  if convo_id is not null then
    return convo_id;
  end if;

  -- Crear nueva conversación
  insert into conversations default values returning id into convo_id;

  -- Insertar participantes
  insert into conversation_participants (conversation_id, user_id)
  values (convo_id, auth.uid()), (convo_id, other_user);

  return convo_id;
end;
$$;


ALTER FUNCTION "public"."create_or_get_conversation"("other_user" "uuid") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."addresses" (
    "id" bigint NOT NULL,
    "alias" "text" NOT NULL,
    "address" "text" NOT NULL,
    "int" "text" NOT NULL,
    "zipCode" "text" NOT NULL,
    "neighborhood" "text" NOT NULL,
    "city" "text" NOT NULL,
    "uuid" "uuid" NOT NULL
);


ALTER TABLE "public"."addresses" OWNER TO "postgres";


ALTER TABLE "public"."addresses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."addresses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."dog_walker_service" (
    "id" bigint NOT NULL,
    "walker_id" "uuid" NOT NULL,
    "fee" real NOT NULL,
    "aboutMe" "text",
    "walkingArea" "text",
    "workingDays" "text"[],
    "workingTime" time without time zone,
    "rate" smallint
);


ALTER TABLE "public"."dog_walker_service" OWNER TO "postgres";


ALTER TABLE "public"."dog_walker_service" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dog_walker_offers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."messages" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "owner_id" "uuid",
    "walker_id" "uuid",
    "sender_id" "uuid",
    "content" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."messages" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."notifications" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "recipient_id" "uuid" NOT NULL,
    "title" "text" NOT NULL,
    "body" "text" NOT NULL,
    "is_read" boolean DEFAULT false,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "walk_id" bigint,
    "event_type" "text"
);


ALTER TABLE "public"."notifications" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pets" (
    "id" bigint NOT NULL,
    "uuid" "uuid",
    "name" "text",
    "age" smallint,
    "gender" "text",
    "bree" "text",
    "size" "text",
    "behaviour" "text"[],
    "aboutme" "text",
    "imageUrl" "text"
);


ALTER TABLE "public"."pets" OWNER TO "postgres";


ALTER TABLE "public"."pets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reviews" (
    "id" bigint NOT NULL,
    "reviewType" "text" NOT NULL,
    "walk_id" bigint NOT NULL,
    "rating" smallint,
    "comments" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "author_id" "uuid" NOT NULL,
    "reviewed_id" "uuid"
);


ALTER TABLE "public"."reviews" OWNER TO "postgres";


ALTER TABLE "public"."reviews" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reviews_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "uuid" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "birthdate" "date",
    "gender" "text",
    "address" "text",
    "int" "text",
    "zipCode" "text",
    "neighborhood" "text",
    "city" "text",
    "usertype" "text",
    "photoUrl" "text",
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "phone" "text",
    "fcm_token" "text",
    "Rating" real DEFAULT '5'::real,
    "customer_stripe_id" "text",
    "subscription_id" "text",
    "subscription_status" boolean,
    "subscription_current_period_end" "text"
);


ALTER TABLE "public"."users" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."walks" (
    "id" bigint NOT NULL,
    "dog_id" bigint NOT NULL,
    "walker_id" "uuid" NOT NULL,
    "owner_id" "uuid" NOT NULL,
    "address_id" bigint NOT NULL,
    "startTime" timestamp without time zone,
    "endTime" time without time zone,
    "notes" "text",
    "status" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."walks" OWNER TO "postgres";


ALTER TABLE "public"."walks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."walks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."walks_with_names" AS
 SELECT "w"."id",
    "w"."dog_id",
    "w"."walker_id",
    "w"."owner_id",
    "w"."address_id",
    "w"."startTime",
    "w"."endTime",
    "w"."notes",
    "w"."status",
    "w"."created_at",
    "p"."name" AS "pet_name",
    "u1"."name" AS "owner_name",
    "u2"."name" AS "walker_name",
    "dws"."fee",
    "dws"."rate"
   FROM (((("public"."walks" "w"
     LEFT JOIN "public"."pets" "p" ON (("w"."dog_id" = "p"."id")))
     LEFT JOIN "public"."users" "u1" ON (("w"."owner_id" = "u1"."uuid")))
     LEFT JOIN "public"."users" "u2" ON (("w"."walker_id" = "u2"."uuid")))
     LEFT JOIN "public"."dog_walker_service" "dws" ON (("w"."walker_id" = "dws"."walker_id")));


ALTER TABLE "public"."walks_with_names" OWNER TO "postgres";


ALTER TABLE ONLY "public"."addresses"
    ADD CONSTRAINT "addresses_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."addresses"
    ADD CONSTRAINT "addresses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dog_walker_service"
    ADD CONSTRAINT "dog_walker_offers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "reviews_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("uuid");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_uuid_key" UNIQUE ("uuid");



ALTER TABLE ONLY "public"."walks"
    ADD CONSTRAINT "walks_pkey" PRIMARY KEY ("id");



CREATE INDEX "notifications_created_at_idx" ON "public"."notifications" USING "btree" ("created_at");



ALTER TABLE ONLY "public"."addresses"
    ADD CONSTRAINT "addresses_uuid_fkey" FOREIGN KEY ("uuid") REFERENCES "public"."users"("uuid") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dog_walker_service"
    ADD CONSTRAINT "dog_walker_offers_walker_id_fkey" FOREIGN KEY ("walker_id") REFERENCES "public"."users"("uuid");



ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_sender_id_fkey" FOREIGN KEY ("sender_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_walker_id_fkey" FOREIGN KEY ("walker_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_recipient_id_fkey" FOREIGN KEY ("recipient_id") REFERENCES "public"."users"("uuid");



ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_walk_id_fkey" FOREIGN KEY ("walk_id") REFERENCES "public"."walks"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_uuid_fkey" FOREIGN KEY ("uuid") REFERENCES "public"."users"("uuid") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "reviews_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "public"."users"("uuid") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "reviews_walk_id_fkey" FOREIGN KEY ("walk_id") REFERENCES "public"."walks"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."walks"
    ADD CONSTRAINT "walks_address_id_fkey" FOREIGN KEY ("address_id") REFERENCES "public"."addresses"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."walks"
    ADD CONSTRAINT "walks_dog_id_fkey" FOREIGN KEY ("dog_id") REFERENCES "public"."pets"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."walks"
    ADD CONSTRAINT "walks_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "public"."users"("uuid") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."walks"
    ADD CONSTRAINT "walks_walker_id_fkey" FOREIGN KEY ("walker_id") REFERENCES "public"."users"("uuid") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Allow owner or walker to read walk" ON "public"."walks" FOR SELECT TO "authenticated" USING ((("owner_id" = "auth"."uid"()) OR ("walker_id" = "auth"."uid"())));



CREATE POLICY "Allow user to read own user" ON "public"."users" FOR SELECT TO "authenticated" USING (("uuid" = "auth"."uid"()));



CREATE POLICY "Enable delete for authenticathed users only" ON "public"."walks" FOR DELETE TO "authenticated" USING ((("auth"."uid"() = "owner_id") OR ("auth"."uid"() = "walker_id")));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."addresses" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."pets" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable insert for authenticathed users only" ON "public"."reviews" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "author_id"));



CREATE POLICY "Enable insert for authenticathed users only" ON "public"."walks" FOR INSERT TO "authenticated" WITH CHECK ((("auth"."uid"() = "owner_id") OR ("auth"."uid"() = "walker_id")));



CREATE POLICY "Enable select for authenticated users only" ON "public"."addresses" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable select for authenticated users only" ON "public"."pets" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable select for authenticated users only" ON "public"."reviews" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "author_id"));



CREATE POLICY "Enable select for authenticated users only" ON "public"."users" FOR SELECT USING (true);



CREATE POLICY "Enable select for authenticated users only" ON "public"."walks" FOR SELECT TO "authenticated" USING ((("auth"."uid"() = "owner_id") OR ("auth"."uid"() = "walker_id")));



CREATE POLICY "Enable update for authenticated users only" ON "public"."reviews" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "author_id"));



CREATE POLICY "Enable update for authenticated users only" ON "public"."users" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "uuid"));



CREATE POLICY "Enable update for authenticated users only" ON "public"."walks" FOR UPDATE TO "authenticated" USING ((("auth"."uid"() = "owner_id") OR ("auth"."uid"() = "walker_id")));



CREATE POLICY "Users can insert notifications" ON "public"."notifications" FOR INSERT WITH CHECK (true);



CREATE POLICY "Users can read their own notifications" ON "public"."notifications" FOR SELECT USING (("auth"."uid"() = "recipient_id"));



CREATE POLICY "Users can update their own notifications" ON "public"."notifications" FOR UPDATE USING (("auth"."uid"() = "recipient_id"));



ALTER TABLE "public"."addresses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dog_walker_service" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pets" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reviews" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."walks" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."messages";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."walks";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


















































































































































































































GRANT ALL ON FUNCTION "public"."create_or_get_conversation"("other_user" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."create_or_get_conversation"("other_user" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_or_get_conversation"("other_user" "uuid") TO "service_role";


















GRANT ALL ON TABLE "public"."addresses" TO "anon";
GRANT ALL ON TABLE "public"."addresses" TO "authenticated";
GRANT ALL ON TABLE "public"."addresses" TO "service_role";



GRANT ALL ON SEQUENCE "public"."addresses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."addresses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."addresses_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."dog_walker_service" TO "anon";
GRANT ALL ON TABLE "public"."dog_walker_service" TO "authenticated";
GRANT ALL ON TABLE "public"."dog_walker_service" TO "service_role";



GRANT ALL ON SEQUENCE "public"."dog_walker_offers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dog_walker_offers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dog_walker_offers_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."messages" TO "anon";
GRANT ALL ON TABLE "public"."messages" TO "authenticated";
GRANT ALL ON TABLE "public"."messages" TO "service_role";



GRANT ALL ON TABLE "public"."notifications" TO "anon";
GRANT ALL ON TABLE "public"."notifications" TO "authenticated";
GRANT ALL ON TABLE "public"."notifications" TO "service_role";



GRANT ALL ON TABLE "public"."pets" TO "anon";
GRANT ALL ON TABLE "public"."pets" TO "authenticated";
GRANT ALL ON TABLE "public"."pets" TO "service_role";



GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reviews" TO "anon";
GRANT ALL ON TABLE "public"."reviews" TO "authenticated";
GRANT ALL ON TABLE "public"."reviews" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reviews_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reviews_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reviews_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



GRANT ALL ON TABLE "public"."walks" TO "anon";
GRANT ALL ON TABLE "public"."walks" TO "authenticated";
GRANT ALL ON TABLE "public"."walks" TO "service_role";



GRANT ALL ON SEQUENCE "public"."walks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."walks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."walks_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."walks_with_names" TO "anon";
GRANT ALL ON TABLE "public"."walks_with_names" TO "authenticated";
GRANT ALL ON TABLE "public"."walks_with_names" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
